// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Enum for the status of a product based on its risk of becoming dead stock.
enum ProductStatus {
  HEALTHY
  AT_RISK
  DEAD_STOCK
}

/// Enum for the type of a recommendation.
enum RecommendationType {
  DISCOUNT
  BUNDLE
  PROMOTION
  RETURN_TO_VENDOR
  LIQUIDATE
  MARKETPLACE_SALE
}

/// Enum for the type of an alert.
enum AlertType {
  PREDICTIVE_RISK
  LOW_STOCK
  HIGH_STOCK
  PERFORMANCE_ISSUE
}

/// Represents a seller or a user of the platform.
model User {
  id                    String                @id @default(uuid())
  email                 String                @unique
  name                  String?
  companyName           String?
  passwordHash          String                // Stores a hashed password for security.
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  products              Product[]
  naturalLanguageQueries NaturalLanguageQuery[]
}

/// Represents an item in a seller's inventory.
model Product {
  id                    String            @id @default(uuid())
  sku                   String            @unique // Stock Keeping Unit, a unique identifier for the product.
  name                  String
  description           String?
  cost                  Float             // The cost of acquiring the product.
  price                 Float             // The selling price of the product.
  currentStock          Int               @default(0)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  
  // Predictive Analytics fields
  deadStockRisk         Float             @default(0) // A value from 0 to 1 indicating risk, calculated by the AI engine.
  status                ProductStatus     @default(HEALTHY)
  
  // Relationships
  userId                String
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  sales                 Sale[]
  alerts                Alert[]
  recommendations       Recommendation[]
  
  @@index([userId, sku])
}

/// Represents a sales transaction for a product. This data feeds the AI engine.
model Sale {
  id                    String   @id @default(uuid())
  quantitySold          Int
  totalRevenue          Float
  saleDate              DateTime @default(now())
  
  // Relationships
  productId             String
  product               Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId, saleDate])
}

/// Represents a predictive alert for a product.
model Alert {
  id                    String    @id @default(uuid())
  message               String
  type                  AlertType
  createdAt             DateTime  @default(now())
  
  // Relationships
  productId             String
  product               Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId, createdAt])
}

/// Represents an actionable recommendation from the AI engine.
model Recommendation {
  id                  String             @id @default(uuid())
  strategy            RecommendationType
  suggestedAction     String             // A description of the suggested action (e.g., "Apply a 20% discount").
  financialImpact     Float?             // The estimated financial impact in currency units.
  createdAt           DateTime           @default(now())
  
  // Relationships
  productId           String
  product             Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId])
}

/// Represents a user's natural language query to the AI.
model NaturalLanguageQuery {
  id          String   @id @default(uuid())
  queryText   String
  responseText String? // The response generated by the AI.
  createdAt   DateTime @default(now())
  
  // Relationships
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}