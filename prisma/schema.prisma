generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== ENUMS =====

/// Product status based on shelf life and dead stock risk
enum ProductStatus {
  ACTIVE
  LOW_SHELF_LIFE
  DEAD_STOCK
}

// ===== MAIN MODELS =====

/// Warehouse model - represents physical warehouse locations
model Warehouse {
  id                String    @id @default(cuid())
  location          String
  capacity          Int       // Total storage capacity in units
  usedCapacity      Int       @default(0) // Currently used capacity
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relationships
  products          Product[]
  orders            Order[]
  
  @@map("warehouses")
}

/// Product model - represents inventory items
model Product {
  id                String        @id @default(cuid())
  name              String
  quantity          Int           @default(0)
  selfLife          DateTime      // The expiration date or shelf-life
  status            ProductStatus @default(ACTIVE)
  
  // Timestamps
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relationships
  warehouseId       String
  warehouse         Warehouse     @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  
  orders            Order[]
  
  @@index([warehouseId])
  @@index([name])
  @@map("products")
}

/// Order model - tracks every order placed
model Order {
  id                String        @id @default(cuid())
  productId         String
  warehouseId       String
  quantityOrdered   Int
  orderDate         DateTime      @default(now())
  
  // Timestamps
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relationships
  product           Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  warehouse         Warehouse     @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  
  @@index([productId])
  @@index([warehouseId])
  @@index([orderDate])
  @@map("orders")
}